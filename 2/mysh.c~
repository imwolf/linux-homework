#include <stdio.h>
#include <stdlib.h>
#include <readline/readline.h>
#include <string.h>
#include <libgen.h>	//definitions for pattern matching functions-
			//basename()
#include <pwd.h>	//pwssword structure(login name,home directory ...)
#include <sys/types.h>  //基本系统数据类型
#include <unistd.h>	//standard symbolic constants and types 

#define BUFSIZE 128

//#define DEBUG

extern void yylex();
extern char* pos_param[];  //NOTE:不能用char **pos_param;
extern int ARGC;	//#值代表数——参数数量
void set_prompt(char []);
void init(void);


int flag_cont_line = 0;  //是否在续行中
char * line_buf;	//读到的行，可能是续行之后组合起来的
int line_len;
int main(int argc,char **argv)
{	
	ARGC = argc;
	int i;
	for (i =0;i<argc;i++){
		pos_param[i] = argv[i];
	}

	init();
	char *line;
	char prompt[200] = ">$";
	line_len = 0;
	while(1){
		set_prompt(prompt);
		if (!(line = readline(prompt)))
			break;
		/*get_input();
		parse_input();
		//if logout || exit break
		do_cmd();*/
		if ( line[strlen(line)-1] == '\\') {//续行
			flag_cont_line = 1;
			line[strlen(line)-1]='\0';
			line_len += strlen(line) ;

			strcat(line_buf,line);
		#ifdef DEBUG
			printf("read a line:%s\n",line);
		#endif

			free(line);
			continue;
		}

		line_len += strlen(line);
		strcat(line_buf,line);
		strcat(line_buf,"\n");
		line_len += 1;
		
		#ifdef DEBUG
		printf("contents in line_buf:%s\nline_len:%d\n",
				line_buf,line_len);
		#endif

		//在这里flex是一次分析一行，并执行一行
		//并没有发挥词法分析器按需返回token的功能
		//在这里词法分析器一遍，语法分析器又是一遍
		//
		yylex();
		
		//一些清理工作
		free(line);
		line_buf[0] = 0;
		line_len = 0;

	}
	return 0;
}


struct passwd* pw;
void init()
{
	//do some intialization
	/*uid_t uid;*/
	
	line_buf = (char *)calloc (BUFSIZE , sizeof(char));

	char *login_name = getlogin();
	pw = getpwnam(login_name);
	printf("%s\n",pw->pw_dir);
	chdir(pw->pw_dir);
}

//TODO:提示符不合理
void set_prompt(char  prompt[])
{
	char host[100];
	char cwd[100];

	if ( flag_cont_line == 1){ //续行中
		flag_cont_line = 0;
		sprintf(prompt,"%s",">");
		return ;
	}

	//get hostname and current working directory
	if (gethostname(host,99) == -1){ 
		strcpy(host,"unknown_host");
	}
	if (!getcwd(cwd,99)){  
		strcpy(cwd,"unknown_cwd");
	}
	sprintf(prompt,"%s@%s:%s$",pw->pw_name/*getlogin()*/,host,cwd);
}
/*int len = 0;
  int ch;
  char buf[300];

  ch = getchar();
  while(len < BUFSIZE && ch!='\n'){
  buf[len++] = ch;
  ch = getchar();
  }
  if (len == BUFSIZE){
  printf("command is too long\n");
  break
  }
  buf[len] = '\n';
  len ++;
  buf[len]=0;*/
