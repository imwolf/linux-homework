课程1：自旋锁

锁机制的最基本的原语是自旋锁。

static DEFINE_SPINLOCK(xxx_lock);

	unsigned long flags;

	spin_lock_irqsave(&xxx_lock,flags);
	... critical section here ..
	spin_unlock_irqrestore(&xxx_lock,flags);

上述代码总是安全的。它总是会禁用_本地_中断，但是
自旋锁本身会保证全局锁，因此总是能保证只有一个在
临界域内的控制流(thread-of-control)被该锁保护。
这甚至在UP下也能运作，因此代码_不_必担心UP与SMP的
问题：自旋锁在两者之下都能正确运作。

	注意！内存中自旋锁的含义在以下文档中详细讨论

	Documentation/memory-barriers.txt
		(5)LOCK operations.
		(6)UNLOCK operations.

上述通常是相当简单（对于大多数事，你通常需要并且只
需要一个自旋锁 —— 使用多于一个自旋锁会使得事情变得
很复杂，甚至会变慢，通常这只在你 _知道_ 需要分开的
序列上才值得这么做：在你不确定的时候，避免这些花费。

这确实是关于自旋锁的真正困难的部分：一旦你使用了自
旋锁，他们往往会扩展到你可能未曾注意的区域，因为你
不得不确保自旋锁在共享数据被使用的_每个地方_正确地
保护它们。自旋锁最容易添加到完全与独立与其他代码的
地方（比如，没有其他人会触及的内部驱动数据结构）。

	注意！自旋锁只有在你_也_使用锁本身在CPU间来
	做锁操作的时候才是安全的。这意味着_任何_触及
	一个共享变量的事物必须同意(agree about)他们想
	要使用的自旋锁。

----

课程2： 读写自旋锁

如果你的数据访问有这么一个天生的模式，你总是想要从
共享变量读，读写锁（rw_lock)版本的自旋锁有时是比较
有用的。他们一次允许多个读者在临界区中，但如果某人
想要改变变量，它必须获得互斥的写锁。

	注意！读写锁比简单的自旋锁需要更多的原子内
	存操作。除非读者的临界区很长，你最好只是使
	用自旋锁。

流程与上面的看起来一样：

    rwlock_t xxx_lock = __RW_LOCK_UNLOCKED(xxx_lock);

	unsigned long flags;

	read_lock_irqsave(&xxx_lock,flags);
	.. 仅读取信息的临界区
	read_unlock_irqrestore(&xxx_lock,flags);

	write_lock_irqsave(&xxx_lock,flags);
	.. 对于信息的读写互斥的访问
	write_unlock_irqrestore(&xxx_lock,flags);

上面这种锁对与像链表的复杂结构可能是有用的，特别是在
不改变表本身的情况下搜索一项。读锁允许许多并发读者。
任何_改变_表的代码必须获得写锁。

	注意！对于表遍历来说RCU更好，但是需要小心
	注意设计细节(查阅 Documentation/RCU/listRCU
	.txt).

并且，你不能“升级”一个读锁到一个写锁，因此在_任何_
需要做些改变(甚至你并不是每次都做)的时候，你必须在
一开始就获得写锁。

	注意！我们正努力在大多数情形中移除读写自旋
	锁，因此请不要在未达成共识前随意增加。（
	反之，查阅 Documentation/RCU/rcu.txt 获得
	完整信息）。

----

课程3：自旋锁重访问

上面的自旋锁原语绝不是唯一的。它们只是最安全的一组，
并且是在所有情形下都能工作的一组，但部分_因为_它们
是安全的，它们也是相当慢的。它们比它们需要成为的慢，
因为它们必须禁用中断（在x86上只是一个指令，但是这个
指令是昂贵的 - 并且在其他体系结构上情形更糟）。

如果你有这么一个情形：你必须在多个CPU间保护一个数据
结构，而且你想要使用自旋锁。那你可能可以使用代价更低
的自旋锁。如果(IFF?)你知道自旋锁永远不会用在中断处理
程序中，你可以使用 non-irq 版本：

	spin_lock(&lock);
	...
	spin_unlock(&lock);

(当然等价的读写版本也是这样）。这自旋锁保证了相同的
互斥访问，并且会快很多。如果考量中的数据只会从“
进程文”访问，也就是说没有中断被涉及，那么该原语会
有用。

如果有中断和自旋锁周旋你就不能使用这些版本的原因是
可能会导致死锁：

	spin_lock(&lock);
	...
		<- interrupt comes in:
			spin_lock(&lock);

在一个中断试图去锁住一个已经锁住的变量的时候就会这
样。如果另一个中断发生在另一个CPU上的时候这没问题，
但如果发生在已经持有锁的同一个CPU上那是_不_行的，因
为这个锁很明显永远不会被释放（因为中断在等待该锁，
而持锁者被这个中断中断了，在该中断前进前不会继续）。

（这也是 irq版本的自旋锁只需要禁用_本地_中断的原因
- 在其他CPU上的中断中使用自旋锁是没有问题的，因为在
其他CPU上的中断不会中断持有锁的CPU，因此持锁者可以
继续并最终释放锁）。

注意你可以聪明的处理读写锁和中断。比如，如果你知道
中断只会获得读锁，那么你可以在所有地方使用无irq版本
的读锁 - 因为他们不会阻塞彼此（并且因此没有死锁的写
中断[wrt interrupts])。但是在处理写锁的时候，你必须
使用中断安全(irq-safe)的版本。

作为聪明处理rw-lock的例子，查看在 kernel/sched.c 中
"waitqueue_lock" 的处理 - 在中断中没有什么_改变_ 
wait-queue ，它们仅仅按序读队列来获知该唤醒谁。因此
读锁是安全的（这一点很好：它们使用的很普遍），而写锁
需要保护自身，以免中断干扰。

	Linus

----

参考信息:

为了动态初始化，恰当地使用spin_lock_init()或者
rwlock_init()：

	spinlock_t xxx_lock;
	rwlock_t xxx_rw_lock;

	static int __init xxx_init(void)
	{
		spin_lock_init(&xxx_lock);
		rwlock_init(&xxx_rw_lock);
		...
	}

	module_init(xxx_init);

为了静态初始化，恰当地使用DEFINE_SPINLOCK() / 
DEFINE_RWLOCK() 或者 __SPIN_LOCK_UNLOCKED() /
__RW_LOCK_UNLOCKED.

