include/linux/wait.h 

50 struct __wait_queue_head {
 51         spinlock_t lock;
 52         struct list_head task_list;
 53 };
 54 typedef struct __wait_queue_head wait_queue_head_t;

wait_queue_head由一个spinlock和list_head（构成一个链表）构成

在该文件中定义了初始化一个waitque_head的外部定义

 80 extern void __init_waitqueue_head(wait_queue_head_t *q, struct lock_class_key *);

我们使用的是一个宏，调用了上面的函数
 82 #define init_waitqueue_head(q)                          \
 83         do {                                            \
 84                 static struct lock_class_key __key;     \
 85                                                         \
 86                 __init_waitqueue_head((q), &__key);     \
 87         } while (0)
 88 

该初始化函数定义在kernel/wait.c中
 13 void __init_waitqueue_head(wait_queue_head_t *q, struct lock_class_key *key)
 14 {
 15         spin_lock_init(&q->lock);
 16         lockdep_set_class(&q->lock, key);
 17         INIT_LIST_HEAD(&q->task_list);
 18 }

而INIT_LIST_HEAD是内核数据结构部分中定义的内联函数，在include/linux/linux.h中

 28 static inline void INIT_LIST_HEAD(struct list_head *list)
 29 {
 30         list->next = list;
 31         list->prev = list;
 32 }
 33 

------------------------------------
所以初始化一个wait_queue_head的过程大约是
init_waitqueue_head(q)  -->   __init_waitqueue_head((q), &__key)--->
INIT_LIST_HEAD(&q->task_list) --> INIT_LIST_HEAD(struct list_head *list)


==========================================
http://blog.csdn.net/iamonlyme/article/details/7176851
599 #define DEFINE_WAIT(name) DEFINE_WAIT_FUNC(name, autoremove_wake_function)


592 #define DEFINE_WAIT_FUNC(name, function)                                \
593         wait_queue_t name = {                                           \
594                 .private        = current,                              \
595                 .func           = function,                             \
596                 .task_list      = LIST_HEAD_INIT((name).task_list),     \
597         }

wait_queue结构体如下：
 28 typedef struct __wait_queue wait_queue_t;

 32 struct __wait_queue {
 33         unsigned int flags;
 34 #define WQ_FLAG_EXCLUSIVE       0x01
 35         void *private;
 36         wait_queue_func_t func;   
 37         struct list_head task_list;
 38 };

autoremove_wake_function函数定义如下（kernel/wait.c）：
163 int autoremove_wake_function(wait_queue_t *wait, unsigned mode, int sync, void *key)
164 {
165         int ret = default_wake_function(wait, mode, sync, key);
166 
167         if (ret)
168                 list_del_init(&wait->task_list);
169         return ret;
170 }
171 EXPORT_SYMBOL(autoremove_wake_function);

---------------------------------------------------
初始化等待队列入口点
DEFINE_WAIT(name)  -->   DEFINE_WAIT_FUNC(name, function) 这样就把名为name的等待队列挂上一个默认的唤醒函数，并且在该结构提上初始化一个链表tasklist
================================================
结束等待
104 void finish_wait(wait_queue_head_t *q, wait_queue_t *wait)
105 {
106         unsigned long flags;
107 
108         __set_current_state(TASK_RUNNING);
109         /*
110          * We can check for list emptiness outside the lock
111          * IFF:
112          *  - we use the "careful" check that verifies both
113          *    the next and prev pointers, so that there cannot
114          *    be any half-pending updates in progress on other
115          *    CPU's that we haven't seen yet (and that might
116          *    still change the stack area.
117          * and
118          *  - all other users take the lock (ie we can only
119          *    have _one_ other CPU that looks at or modifies
120          *    the list).
121          */
122         if (!list_empty_careful(&wait->task_list)) {
123                 spin_lock_irqsave(&q->lock, flags);
124                 list_del_init(&wait->task_list);
125                 spin_unlock_irqrestore(&q->lock, flags);
126         }
127 }
128 EXPORT_SYMBOL(finish_wait);

-----------------------------------------
反正结束wait的时候会把删除一个等待队列上的元素，
不明白的是在DEFINE_WAIT的时候不是已经有autoremove_wake_function把队列头给去掉了么
